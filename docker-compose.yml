version: '3.8'

services:
  postgresql:
    image: postgres:12
    env_file:
      - .env

  app:
    user: ${DOCKER_USER:-1000}
    image: "${WARREN_APP_IMAGE_NAME:-fundocker/warren}:${WARREN_APP_IMAGE_TAG:-app-main}"
    env_file:
      - .env
    ports:
      - "${WARREN_APP_SERVER_PORT:-8090}:${WARREN_APP_SERVER_PORT:-8090}"
    command:
      - python
      - manage.py
      - runserver
      - 0.0.0.0:${WARREN_APP_SERVER_PORT:-8090}
    volumes:
      - ./src/app/staticfiles:/app/staticfiles
    depends_on:
      - postgresql
      - api
      - frontend

  api:
    build:
      context: src/api
      target: "${WARREN_API_IMAGE_BUILD_TARGET:-development}"
      args:
        DOCKER_USER: ${DOCKER_USER:-1000}
    user: ${DOCKER_USER:-1000}
    image: "${WARREN_API_IMAGE_NAME:-warren-tdbp-api}:${WARREN_API_IMAGE_TAG:-development}"
    env_file:
      - .env
    environment:
      PYLINTHOME: /app/.pylint.d
      RUFF_CACHE_DIR: /app/plugins/tdbp/.ruff_cache
      MYPY_CACHE_DIR: /app/plugins/tdbp/.mypy_cache
    ports:
      - "${WARREN_API_SERVER_PORT:-8100}:${WARREN_API_SERVER_PORT:-8100}"
    command:
      - uvicorn
      - "warren.api:app"
      - "--proxy-headers"
      - "--log-config"
      - "plugins/tdbp/logging-config.dev.yaml"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "${WARREN_API_SERVER_PORT:-8100}"
      - "--reload"
    volumes:
      - ./src/api:/app/plugins/tdbp
    depends_on:
      - ralph
      - postgresql

  frontend:
    build:
      context: src/frontend
      target: "${WARREN_FRONTEND_IMAGE_BUILD_TARGET:-development}"
      args:
        DOCKER_USER: ${DOCKER_USER:-1000}
    user: ${DOCKER_USER:-1000}
    image: "${WARREN_FRONTEND_IMAGE_NAME:-warren-tdbp-frontend}:${WARREN_FRONTEND_IMAGE_TAG:-development}"
    environment:
      HOME: /tmp
    command:
      - yarn
      - run
      - dev
    volumes:
      - ./src/frontend:/app
      - ./src/app/staticfiles:/app/staticfiles
    depends_on:
      - api

  # -- backends
  ralph:
    image: fundocker/ralph:3.8.0
    user: ${DOCKER_USER:-1000}
    env_file:
      - .env
    ports:
      - "${RALPH_RUNSERVER_PORT:-8200}:${RALPH_RUNSERVER_PORT:-8200}"
    command:
      - ralph
      - "-v"
      - DEBUG
      - runserver
      - "-b"
      - "es"
    volumes:
      - .:/app
    depends_on:
      - elasticsearch

  elasticsearch:
    image: elasticsearch:8.7.1
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
    ports:
      - "9200:9200"
    mem_limit: 2g

  # -- tools
  dockerize:
    image: jwilder/dockerize
    volumes:
      - ./src/app/staticfiles:/app/staticfiles
