version: '3.8'

services:
  postgresql:
    image: postgres:12
    env_file:
      - env.d/postgresql.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./db-init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fun"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    networks:
      - backend
  
  app:
    image: apuiavignonuniversity/warren-tdbp:app-v0.5.0
    env_file:
      - env.d/app.env
    ports:
      - "8000:8000"
    command:
      - "gunicorn"
      - "-c"
      - "/usr/local/etc/gunicorn/warren.py"
      - "warren.wsgi:application"
    volumes:
      - media:/srv/media
      - static:/srv/static
    healthcheck:
      test: curl -f http://localhost:8000/__heartbeat__ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    networks:
      - backend

  api:
    image: apuiavignonuniversity/warren-tdbp:api-v0.5.0
    env_file:
      - env.d/api.env
    ports:
      - "8100:8100"
    command:
      - uvicorn
      - "warren.api:app"
      - "--proxy-headers"
      - "--log-config"
      - "core/logging_config.yaml"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8100"
      - "--reload"
    configs:
      - source: logging_config
        target: /app/core/logging_config.yaml
    healthcheck:
      test: curl -f http://localhost:8100/__heartbeat__ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 3
      restart_policy:
        condition: any
    networks:
      - backend

  indexer-cronjob:
    image: apuiavignonuniversity/warren-tdbp:api-v0.5.0
    env_file:
      - env.d/api.env
    environment:
      - WARREN_SERVER_HOST=api
    command:
      - warren
      - xi
      - index
      - all
      - --ignore-errors
    configs:
      - source: logging_config
        target: /app/core/logging_config.yaml
    deploy:
      mode: replicated
      replicas: 0
      labels:
        - "swarm.cronjob.enable=true"
        - "swarm.cronjob.schedule=0 1 * * *"
        - "swarm.cronjob.skip-running=false"
      restart_policy:
        condition: none
    networks:
      - backend

  cronjob-operator:
    image: crazymax/swarm-cronjob
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - "TZ=Europe/Paris"
      - "LOG_LEVEL=info"
      - "LOG_JSON=false"
    deploy:
      placement:
        constraints:
          - node.role == manager

configs:
  logging_config:
    external: true

volumes:
  postgres_data:
    external: true
  media:
    external: true
  static:
    external: true

networks:
  backend:
    external: true
